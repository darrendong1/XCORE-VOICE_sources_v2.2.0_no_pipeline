// This file is generated. Do not edit.
// Generated on: 23.09.2022 11:48:04


#include "../../api/xcore_config.h"
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/conv.h"
#include "tensorflow/lite/micro/kernels/fully_connected.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/kernels/reduce.h"
#include "tensorflow/lite/micro/kernels/softmax.h"
#include "tensorflow/lite/micro/micro_context.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace tflite {
namespace ops {
namespace micro {
namespace xcore {
extern TfLiteRegistration *Register_XC_conv2d_v2(void);
} // namespace xcore
}  // namespace micro
}  // namespace ops
}  // namespace tflite

namespace {

constexpr int kTensorArenaSize = 1208;
uint8_t tensor_arena[kTensorArenaSize] ALIGN(8);
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_XC_conv2d_v2, OP_CONV_2D, OP_RESHAPE, OP_LOGISTIC,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
  int custom_initial_data_size;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[16];
TfLiteEvalTensor evalTensors[16];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[6];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,1,4,24 } };
const TfArray<1, float> quant0_scale = { 1, { 0.11438909918069839, } };
const TfArray<1, int> quant0_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int16_t tensor_data1[64] = { 
    15962, 15962, 15962, 15962, 15962, 15962, 15962, 15962, 15962, 15962, 
    15962, 15962, 15962, 15962, 15962, 15962, -8861, -13158, -1738, -23446, 
    -3752, -11320, -7356, -13810, -5228, -4251, -11795, -16622, -12463, -5742, 
    -12875, -17338, 15962, 15962, 15962, 15962, 15962, 15962, 15962, 15962, 
    15962, 15962, 15962, 15962, 15962, 15962, 15962, 15962, -9606, -5211, 
    -12676, -2966, -15436, -4138, -11894, -7782, -16901, -4613, -12642, -17486, 
    -4245, -6201, -10535, -3371, 
};
const TfArray<1, int> tensor_dimension1 = { 1, { 64 } };
const ALIGN(8) int8_t tensor_data2[4096] = { 
    -1, -88, 1, -3, 2, -2, 3, 0, 7, -9, 
    1, -1, 3, 2, 1, -8, -1, -11, 6, -2, 
    -1, 3, -5, 2, 0, -3, 3, 3, 5, -3, 
    -5, 3, 3, 0, 6, 3, 1, 4, -4, 9, 
    2, 8, 6, 3, -2, -5, 5, 2, 7, 6, 
    -1, 4, -8, -9, -7, -3, 5, -13, -3, 10, 
    8, 1, 6, -4, -6, -2, -2, -5, -1, -5, 
    12, -2, 5, -1, -10, -3, 6, 9, -3, -3, 
    -9, 2, -7, -4, -2, 7, 5, -2, -2, 16, 
    -13, -1, -10, 2, -5, 11, -5, -1, -5, -3, 
    -7, -6, 2, -6, 2, -4, -4, -2, 5, 3, 
    -6, -7, -7, -2, -1, -3, 4, -2, -7, 1, 
    -2, 10, 4, -3, -3, -4, -2, 3, -3, -9, 
    0, -12, -4, -2, 5, -13, 4, -1, -4, -11, 
    2, 2, -4, -2, -3, -6, 4, -1, -2, 6, 
    -3, 2, 1, 1, -7, 1, -1, -1, -50, 6, 
    2, 4, -1, 1, 3, 3, -5, 4, -10, 4, 
    5, 1, -3, -9, 0, 3, 5, 5, -4, 2, 
    -127, -2, -6, -3, 2, -11, -4, -2, 2, 4, 
    5, -4, -3, 0, 0, -3, -1, -3, 4, -3, 
    2, -10, -4, -5, 3, 0, -3, -4, -3, -1, 
    5, 0, -2, 2, 3, 3, -4, 9, 4, -2, 
    -1, -2, -2, 3, -6, -10, 0, -6, 5, -5, 
    7, 0, 2, -3, -5, -3, -1, 6, -2, -5, 
    -3, -9, -17, -5, -1, 9, 2, -1, 2, -6, 
    6, 4, 3, -6, -2, 11, 3, 9, -6, 2, 
    1, 2, -3, 0, -24, 0, 2, 5, 1, -6, 
    5, 0, 2, -1, -4, 2, -95, 3, -5, -5, 
    4, -7, -2, -11, 2, 4, 1, -3, 2, -2, 
    3, 2, 1, 3, -5, 6, 1, 3, 4, 4, 
    -5, -2, 7, 5, 3, 2, -6, 4, -5, -1, 
    -8, -5, 4, -10, -3, 4, 2, 5, 3, -3, 
    0, -17, 0, -1, 3, -2, -2, 0, 3, -3, 
    -1, 1, 2, 1, -1, -2, -2, -1, 1, -3, 
    0, 5, 2, 1, -4, 0, -10, 0, -4, -2, 
    1, -15, -3, -2, 1, -4, 1, -1, 7, 0, 
    1, -3, -4, -3, 3, 1, -4, -1, -4, -12, 
    6, -4, -3, 4, 4, 2, -1, 10, 6, -3, 
    -3, -2, -2, 6, -1, -2, -33, -6, -4, -4, 
    7, -8, 0, -2, 0, -4, 3, -1, 3, 0, 
    -7, 1, -5, -2, 0, 1, 5, 0, 3, -5, 
    0, -5, -19, 1, -3, -5, 3, -2, 2, 2, 
    3, 4, -6, 3, -1, 4, 3, 4, -3, -7, 
    5, 3, 3, 2, -4, 4, -3, -1, -11, -4, 
    3, -10, -5, 4, 3, 2, 2, -1, -6, -3, 
    -4, -7, -4, 0, -2, -6, 6, -3, -4, 2, 
    6, 5, -9, -5, -6, 0, -14, -3, -1, 5, 
    3, -2, -4, 8, -12, 0, -4, -4, -2, 0, 
    -4, -1, 2, -5, -2, -7, 7, -2, -8, -5, 
    -6, -6, 3, 4, -4, -5, -6, 0, 7, -1, 
    -25, 3, 8, 4, -4, 12, 5, -4, -5, -1, 
    -3, 7, -2, -26, -1, -2, -1, -2, 3, 0, 
    2, -10, 6, -3, 1, 1, -1, -5, -2, -16, 
    7, -3, 1, -1, -3, 2, 3, 7, 4, -4, 
    1, 1, -2, 5, -1, -13, 1, -4, -3, -2, 
    -1, -9, 0, -4, -1, -1, -3, 5, 2, -4, 
    -4, -8, -5, -2, -2, 1, -24, -2, 3, -16, 
    1, 2, -5, 2, -7, 7, -4, -2, -1, -4, 
    0, -4, 3, 1, 2, 0, -9, -8, 6, 7, 
    -1, -1, -8, 1, -4, -2, -1, 6, 1, -2, 
    -2, 12, -7, -1, -1, -1, -3, 6, -2, 1, 
    -4, -4, -3, -6, 4, -3, 2, -3, -6, 1, 
    3, 3, -2, -5, 0, -1, 1, 0, 5, 1, 
    -9, 1, -5, -1, 3, -1, -3, -4, -1, 0, 
    0, -1, -2, -7, -4, -2, 7, -10, 1, -1, 
    0, -6, 1, 0, -3, -4, -1, -3, 4, -1, 
    -1, 6, 1, 1, 3, 3, -1, -1, -7, -2, 
    -26, 6, 2, -6, 1, 1, 2, 0, -6, 0, 
    -2, 1, 1, 3, -3, 4, 0, 3, -1, -3, 
    -6, 2, 0, 1, -6, -3, 5, -8, -4, 1, 
    4, 3, -2, 0, -2, 0, -1, -3, -3, -4, 
    1, -2, 3, -2, -3, -5, 2, 3, -1, -5, 
    -1, -3, 6, 0, -1, 2, 4, 2, -4, 7, 
    4, 0, -3, -4, 0, 4, -3, -2, -3, -7, 
    -1, -4, 6, 1, -1, -1, -3, -2, -1, 5, 
    -4, -4, -3, -8, 1, -4, 3, 7, 8, 0, 
    -2, 17, 4, -1, 2, -2, -1, 9, 3, 0, 
    2, 4, 1, 5, -5, 4, 4, 4, 4, 3, 
    -1, -4, 0, 4, 2, 5, -4, 4, -3, -3, 
    -6, -2, 2, -9, -3, 7, 3, 3, 2, -5, 
    2, 0, 0, 2, 2, 0, -4, 1, -5, 1, 
    2, 2, -5, -1, 3, 1, 3, 1, -5, 2, 
    -6, 0, -7, -1, 3, -6, -2, -2, 2, 2, 
    2, -1, -3, -7, 0, -1, -2, -1, -4, -1, 
    -1, -3, 2, -1, 1, 0, 1, -3, 0, -2, 
    -1, -3, 3, 4, -3, 1, 2, 5, -8, -3, 
    -1, 1, 0, -2, -2, 0, 1, -2, -1, 0, 
    3, 0, 2, 0, -4, -6, 2, 3, -1, -3, 
    -5, -9, 6, 0, -1, 1, 3, 0, -2, 8, 
    4, 1, -4, -3, -1, 5, -1, -1, -28, -6, 
    -2, -3, 5, -5, 0, 0, 0, -2, 2, 0, 
    4, -2, -6, 1, -1, -2, 2, 1, 3, 2, 
    0, -3, 0, 1, -11, -1, 0, -3, 2, 0, 
    1, 3, 3, 1, -4, 3, -2, 2, 1, 5, 
    -4, -2, 3, 2, 3, 1, -3, 1, -4, -1, 
    -6, -1, 3, -6, -2, 0, 3, 2, 2, -2, 
    -4, 0, -3, -2, -4, -1, 5, -6, 3, -1, 
    -7, -3, 4, 6, -1, -1, -2, 0, -11, 0, 
    -1, 3, 6, -3, -4, 14, -5, -1, -7, 3, 
    -2, 7, -1, -1, 1, -4, -2, -6, 3, -4, 
    -3, -2, -3, -3, 3, 3, -4, -4, -3, -1, 
    9, -1, -17, 0, 6, 2, -6, 6, 5, -4, 
    -4, 0, -2, 6, -2, -21, -1, -3, -5, -3, 
    3, 1, 1, -1, 8, -4, 4, 1, 0, -1, 
    -3, -8, 3, -3, 1, 4, 2, 2, 5, 5, 
    4, -3, -1, 2, -1, 1, 2, 2, 1, 4, 
    2, 4, -2, 4, 3, 4, 6, 2, -1, -8, 
    7, 2, 5, 3, -2, 3, -5, 1, -7, -2, 
    4, -6, -2, 4, 5, 4, 1, -5, -2, -1, 
    -1, -4, 1, -7, 11, 0, -1, 0, -5, -4, 
    5, 7, 1, -3, -8, 4, -3, 0, -2, 8, 
    3, -2, -4, 12, -6, -2, -4, -1, -1, 4, 
    -2, 2, -3, -1, -6, -5, 5, -5, 1, -3, 
    -6, -2, 4, 0, -4, -4, -4, -3, -1, -1, 
    2, 0, 4, 0, -3, 9, 2, 1, -4, 0, 
    -2, 5, -1, -1, 1, -3, 0, 0, 7, -3, 
    0, -4, -3, -4, 2, 0, -6, -1, -3, -7, 
    5, 1, -1, 3, 0, 1, -2, 17, -6, -4, 
    -3, -4, -24, 7, 2, -3, 4, 1, 2, 2, 
    -7, 0, 2, 4, 1, 4, -1, -9, 3, 3, 
    3, 1, -5, 2, -5, -1, -6, -3, 3, -8, 
    -3, 5, 5, 1, 2, -3, -1, 0, 0, -1, 
    -2, -5, 6, -4, 1, -4, -3, -1, 4, 4, 
    -3, -3, -1, -3, 4, -2, -2, 1, 1, 1, 
    -4, 4, 5, -2, 0, -1, -1, 6, -3, -3, 
    0, -3, 0, -1, -5, -2, -2, 0, -3, -5, 
    -1, 4, -4, -2, -4, -3, 0, -1, 1, 5, 
    3, 1, 0, -4, 6, 2, -1, 0, 0, 7, 
    -1, -16, 4, -3, 1, -3, -2, -3, 1, -4, 
    -5, 3, -2, 5, 0, -3, -3, -5, -8, 0, 
    -1, 1, -9, -5, 3, -14, -2, 3, -4, 2, 
    -6, 5, 2, 2, 0, 1, 1, 2, -5, 3, 
    -20, 4, 3, 5, -2, -17, 0, 2, 4, 5, 
    -1, 1, -77, -2, -7, -3, 2, -5, -2, -1, 
    5, 3, 2, -3, -2, -7, -1, -1, -3, -4, 
    -4, -1, -1, -3, 2, 0, 0, 1, -2, -1, 
    0, -1, -4, -1, 0, 4, -3, 2, -2, 8, 
    -6, -3, -1, 0, 1, -7, -1, 0, 0, -3, 
    -3, -1, 7, -1, 3, -2, -4, -2, 2, 3, 
    -1, -1, -7, -9, 6, -4, -1, 3, 2, 1, 
    -4, 7, 5, -1, 0, -1, 0, 4, -1, 1, 
    -20, -5, -3, 0, 2, -6, 2, 0, -3, -3, 
    1, 0, 3, -2, -5, 2, -7, -1, 1, -1, 
    -10, 1, 1, -16, 0, -1, -13, 2, -2, 0, 
    2, 0, -1, 2, 3, 2, -4, 4, -9, 1, 
    1, 3, 0, 1, 1, 1, 2, 5, -3, 2, 
    -3, -1, -3, -1, 3, -7, -4, -1, 2, 3, 
    2, -1, -2, 0, -4, -4, -2, -2, 1, -4, 
    2, 0, -3, -2, 4, 4, -3, -2, -1, 0, 
    -15, -1, 1, 4, 0, -3, -2, 3, -10, -3, 
    -5, 0, -1, 7, -2, 1, 1, -4, 0, -4, 
    4, -2, -2, -2, -3, -4, 3, 4, -5, -4, 
    0, -2, 5, -2, -8, 0, 4, 3, -6, 11, 
    3, -1, -3, -4, -1, 5, 0, -72, 0, -3, 
    -4, -3, 6, 0, 5, -3, 1, -9, 4, 6, 
    -1, 0, -4, -8, 4, -2, 1, 2, -1, 1, 
    -4, 0, 1, 2, -7, 0, -5, -2, 2, 6, 
    -6, -2, 1, 1, -3, 2, -39, 1, 2, 3, 
    -1, -3, 2, 2, 1, 4, -3, 0, -95, 1, 
    -6, -2, 1, -6, -3, -13, 1, 3, 3, -3, 
    -4, -2, -1, -4, 0, -4, 6, -3, 4, -2, 
    -7, -6, 5, 9, -5, 0, -8, 4, -1, 0, 
    -4, 8, 5, -4, -2, 15, -9, -2, -5, -2, 
    0, 10, -2, 1, -5, -1, -6, -6, 3, -5, 
    2, -2, -3, -1, 4, 3, -6, -3, -5, -4, 
    1, -1, 0, -1, -12, 1, -3, 3, 4, -3, 
    -3, 1, -3, 4, -1, -8, 1, -4, 2, 0, 
    3, -5, 2, -7, 0, 0, 4, 3, -4, -7, 
    -3, -5, 10, 1, 1, 4, 2, -1, 0, -13, 
    -3, 0, 0, -2, -26, 12, 2, 3, 1, 4, 
    4, 2, -6, 6, -5, 3, 3, 4, -1, 1, 
    5, 3, 2, 3, -5, 3, -7, -6, -4, -1, 
    2, -11, -2, 0, 1, 0, 2, -6, -3, 1, 
    -1, -3, -2, -5, 6, -5, 1, -10, -4, -5, 
    2, 4, -3, -2, -2, -2, 8, -2, -3, 2, 
    6, 3, -4, 16, 4, 0, -2, -2, -2, 6, 
    -3, -8, -1, 0, 0, -2, 1, 1, 0, 0, 
    -7, -8, -1, 6, 1, -4, -5, -7, -7, 0, 
    0, 7, 6, 0, 3, 15, 4, 4, 0, -3, 
    0, 8, 2, 0, 5, 4, 3, 4, -7, 7, 
    -4, 5, 4, 4, -3, -8, 1, 5, 8, 8, 
    -5, 3, -32, -8, -2, -5, 1, -13, -3, 6, 
    4, 3, 6, -7, 2, -2, 1, 2, 3, 3, 
    -5, 3, 0, 3, 5, 6, -1, 1, 2, 1, 
    2, 2, -3, 3, 1, -5, -6, -3, 1, -7, 
    -3, 1, 5, 2, 3, -3, -1, -12, 0, -1, 
    -5, -1, -6, -1, 1, -2, 2, 3, 2, 2, 
    1, -3, -2, -1, -3, -1, 1, 6, 3, 3, 
    1, 3, -5, 3, -3, -3, 0, -11, -5, 0, 
    1, -4, -1, -1, 6, -2, 2, -1, -6, -5, 
    4, 3, 0, -2, -2, -16, 8, -6, 1, 2, 
    3, 2, -4, 11, 3, 0, -4, -2, -2, 4, 
    -1, 0, -28, -7, -4, -5, 4, -12, -2, -6, 
    -2, -2, 1, -1, 6, -5, -3, 1, -6, -2, 
    -1, 1, 1, 1, 3, -13, -1, -12, -15, 1, 
    -3, -2, 1, 0, 1, 1, 4, 4, -6, 4, 
    -5, 3, 5, 3, -1, -9, 1, 2, 4, 1, 
    -4, 3, -7, -2, -4, -2, 4, -7, -3, 1, 
    3, 3, 2, -2, -3, -2, -6, -2, -1, -3, 
    2, -7, 2, -1, -2, 0, 4, 4, -5, -6, 
    -1, 2, -27, -5, -1, 5, 2, -3, 0, 15, 
    -8, -1, 0, 0, 1, -1, -4, 0, 0, -8, 
    0, -8, 8, -2, -6, -3, -5, -4, 2, 3, 
    -4, -3, -3, -1, 8, -2, -6, 4, 9, 4, 
    -5, 11, 4, -8, -4, -2, -2, 5, 2, 0, 
    -1, 1, 5, -1, -4, 3, -7, 2, 4, 5, 
    -3, 0, -1, 2, 4, -1, -5, 3, -11, -5, 
    -7, -2, 2, -8, -3, -1, 2, 3, 2, -3, 
    0, -21, 11, -3, 3, -5, -3, 4, 5, 0, 
    1, -2, 2, 0, 4, 1, 3, 2, -4, 3, 
    -9, -7, -1, -5, -2, -16, -2, 16, 9, 0, 
    3, -13, 1, 3, -5, 2, 1, 3, -3, 3, 
    -13, 1, 4, 2, 0, -13, -2, 1, 3, 2, 
    -3, 3, -25, -1, -6, -2, 2, -5, -2, -9, 
    0, 4, 3, -2, 1, -3, 0, 4, 3, 1, 
    -6, 4, -3, 1, 4, 4, -2, 1, 5, 4, 
    3, 3, -2, 3, -5, 0, -6, -2, 3, -7, 
    -3, -3, 1, 1, 2, -4, -2, 0, -13, -1, 
    1, -4, 6, -6, -8, -6, -3, -1, 2, 4, 
    -6, -6, -3, 1, 2, -7, -21, -7, 7, 4, 
    -5, 4, 6, -4, -5, -2, -1, -7, -1, -7, 
    -3, -4, -1, -4, -6, 3, -1, 0, 1, -3, 
    -2, 3, -1, -2, -4, 1, -1, -2, 3, 3, 
    -5, 3, 1, 2, -6, -6, -8, -1, -1, -7, 
    2, -1, 3, 2, 3, 2, -9, 2, 0, 3, 
    3, 3, -5, -4, 3, 3, 3, 2, -4, 2, 
    -3, -1, -11, -5, 1, -10, -5, 2, 1, 4, 
    1, -3, -3, -10, 2, -2, 3, -1, 7, -3, 
    5, -10, 2, -4, 3, -1, -2, -6, -2, -13, 
    7, 0, -2, 8, 0, 1, 3, 2, -2, -1, 
    -6, 1, -24, 10, -2, -4, 1, -1, 2, -2, 
    3, -3, 2, -5, 0, -2, 0, 3, 1, -1, 
    -3, -8, 8, -1, -3, 4, 0, 3, 0, 2, 
    1, -4, -4, -3, -11, 4, 1, -16, 7, -1, 
    5, -1, -1, 5, 6, -2, -1, 3, -3, 6, 
    4, 2, 1, -3, -5, 4, -6, -4, -13, -5, 
    3, -17, -5, 13, 0, -1, -5, 1, -3, -1, 
    0, -2, -2, -2, 4, -1, 3, -4, -4, -5, 
    1, 2, -4, -4, -4, -4, 5, -1, -2, 2, 
    3, 3, -4, 11, 4, -1, 0, -2, -3, 6, 
    3, 9, -9, -1, -1, 3, -3, -5, -22, 3, 
    1, 3, -1, 2, 6, -1, 2, -2, -6, -1, 
    -124, 2, -9, -2, 4, -1, -3, -17, -4, 5, 
    0, 1, -3, 0, -2, -3, 0, -4, 6, -5, 
    1, -2, -5, -4, 3, 4, -3, -2, -6, -5, 
    3, -4, 2, 4, 0, 1, -5, 10, 4, -1, 
    0, -1, -3, 4, -2, -2, -20, -2, -2, 2, 
    3, 0, -1, 1, -4, 0, -2, 1, -4, 3, 
    -1, -4, 0, -4, -2, 3, 5, 2, 0, 0, 
    3, -5, -1, -3, -2, -14, -1, -2, -1, -4, 
    -3, -4, 2, -5, 3, -2, -7, -4, 5, 4, 
    -5, -5, -3, -2, 7, -4, -2, 1, 4, 2, 
    -8, 10, 4, -1, -3, -3, -3, 7, 2, 0, 
    1, 3, 3, 3, -5, 4, -7, 3, 2, 5, 
    -3, -2, 3, 2, 3, 3, -4, 2, -27, -6, 
    -6, -2, 3, -9, -3, 5, 4, 4, 3, -2, 
    1, 2, 0, 2, 2, 1, -6, 3, -3, 1, 
    3, 4, -1, -8, 1, 2, 5, 2, -4, 1, 
    -6, -1, -7, -3, 1, -7, -2, 2, 5, 3, 
    1, -1, 0, -1, 3, 3, 2, -1, 0, 7, 
    -3, 3, 6, 1, -2, 0, 4, 4, 3, 3, 
    -3, 3, -11, -1, -8, -1, 3, -9, -3, -1, 
    4, 0, 1, -3, 2, 6, -2, 2, 2, 2, 
    -3, 0, -4, 2, 1, 3, -1, 4, 2, 0, 
    0, 1, -5, 0, -14, 0, -6, -1, 2, -7, 
    -1, -3, 1, 3, 2, -2, 2, 4, -3, 1, 
    2, 0, -6, 4, -18, 2, 2, 3, -2, -15, 
    1, 3, 4, 5, -3, 3, -22, -2, -6, -2, 
    4, -8, -3, -4, 3, 3, 3, -2, 0, 0, 
    -7, 1, -1, -3, 4, -3, -3, -2, -2, -3, 
    2, 6, -4, -6, -3, -1, 3, -6, -8, -7, 
    4, 3, -4, -2, 3, -4, -3, -2, -1, 0, 
    -2, -3, -1, -1, 0, -3, -2, -1, -3, 3, 
    2, -6, -1, 1, 1, -7, -8, -3, 0, -1, 
    6, 3, -5, 3, 2, 8, -5, -4, -4, -1, 
    -2, -4, 3, 0, 0, 0, 3, 3, -6, 3, 
    -12, 3, 3, 5, -1, -3, 3, 1, 2, 2, 
    -4, 1, -14, -2, -5, -2, 3, -9, -3, 2, 
    1, 2, 2, -4, -3, -2, 1, -3, 1, -3, 
    5, -6, 2, -10, 1, -4, 3, -3, -2, -5, 
    1, -14, 4, 0, 0, 5, -1, 1, 5, 4, 
    -5, -3, -2, -1, -13, 8, -2, 1, 1, 0, 
    -2, 2, 3, -6, 2, -2, -2, -3, 1, 0, 
    -3, 0, 0, -6, 3, 0, -1, 3, 1, 2, 
    -1, 5, 4, -1, -4, -1, -9, 5, 3, 6, 
    3, 2, 1, 3, -3, 8, 0, 8, 4, 1, 
    -3, -14, 6, 4, 4, 7, 0, 6, -7, -1, 
    -4, -3, 5, -10, -2, 3, 3, 4, 8, -6, 
    -2, 0, 1, -1, -3, -2, 5, -3, 1, -2, 
    -5, -4, 2, 3, -3, -2, -4, -3, 5, 0, 
    0, 3, 3, 0, -5, 7, 3, -1, -2, -2, 
    -1, 3, 2, 4, -2, 6, 0, 1, -2, 3, 
    2, -2, 2, 1, 0, -3, 2, 2, 2, 3, 
    -3, 3, -17, 2, -5, -2, 1, -3, -1, -3, 
    0, 1, 0, -1, -2, 0, 0, -2, 1, -2, 
    7, -4, 2, -1, -5, -2, 4, 4, -1, -2, 
    -7, -4, 5, -2, 4, 3, 4, 0, -6, 6, 
    3, -1, -3, 0, -1, 5, 0, 0, -22, 0, 
    0, -1, 0, 1, 2, 0, 0, -2, -4, 1, 
    3, 0, -3, -4, 1, -3, 2, 2, 6, 2, 
    2, 0, 2, -1, -3, -2, 0, -7, -2, 0, 
    0, -3, -3, -1, 5, -4, 1, -1, -4, -4, 
    3, 2, -3, -4, -2, -1, 3, 0, -3, 2, 
    4, 2, -7, 9, 4, 0, -2, -3, -2, 5, 
    0, 0, 3, 0, 0, 2, -5, 0, 0, 2, 
    4, 1, -2, -3, 5, 1, 3, 1, -4, 3, 
    2, -3, -11, -1, 4, -5, -3, 4, 5, 3, 
    2, -2, 2, 0, 1, 2, 3, 3, -6, 3, 
    -3, 5, 5, 4, -2, -3, 2, 3, 2, 4, 
    -2, 3, -8, -3, -7, -3, 2, -9, -3, 3, 
    4, 2, 2, -3, 3, 6, -8, 0, 2, 0, 
    -2, 4, -2, 0, 2, 3, -1, -8, 1, 0, 
    4, 4, -4, 3, -6, -2, -9, -1, 1, -6, 
    0, 0, 1, 2, 5, -1, 2, 0, 1, 3, 
    4, 2, -4, 3, 0, 1, 4, 4, -2, -4, 
    -2, 2, 1, 2, -4, 2, -6, 0, -6, -4, 
    4, -7, -1, 2, 3, 3, 2, 0, 3, 1, 
    -2, 2, 1, -1, -6, 3, -3, 1, 4, 4, 
    -2, 2, 2, 3, 2, 1, -3, 2, 0, -2, 
    -3, -3, 0, -6, -2, 0, 3, 2, 3, -3, 
    -1, -1, -8, -2, -3, -1, 2, -5, -7, -2, 
    2, -3, 0, 3, 5, -4, -5, 0, 2, -5, 
    -7, -6, 2, 3, -3, 3, 2, 1, -2, -1, 
    -1, -2, 0, -1, -1, -2, -1, -2, -7, 1, 
    -2, -1, 0, -3, -1, 3, 3, -2, -7, 0, 
    3, 0, 5, 3, 0, 2, 3, -2, -9, -3, 
    -6, -1, 0, -7, 2, -1, 1, 3, 3, 3, 
    -5, 3, 0, 3, 1, 4, -1, 2, 4, 3, 
    1, 1, -2, 0, 0, 0, -3, -1, 3, -6, 
    -2, 1, 3, 2, 1, -2, -3, -3, -1, -4, 
    -2, -3, 4, -15, 2, -8, 1, -4, 3, 2, 
    -2, -3, 0, -11, 5, -2, -1, 5, -1, -1, 
    1, 8, 0, -3, -7, -8, -18, 9, -2, 1, 
    -1, -1, -1, 0, 2, -8, 1, -1, 2, -3, 
    -2, 1, 0, -2, 0, -6, 4, -2, 0, 2, 
    1, 1, -3, 0, 0, -5, -5, -3, -8, 4, 
    1, 3, -4, -2, 1, -1, -5, -2, 2, 0, 
    2, 4, -1, 4, 2, -2, 0, -5, -1, 1, 
    -6, 3, -5, -2, 1, -2, 0, -5, 1, 3, 
    -2, 1, -3, 1, -1, -3, -1, -2, 4, -1, 
    1, -1, -4, -3, 2, 1, -2, -1, -3, -2, 
    6, -2, 0, 3, 1, 1, -4, 8, 3, -1, 
    -2, 0, -3, 4, 2, 0, 3, 3, 1, 4, 
    -3, 4, 0, 3, 3, -2, -2, -4, 3, 5, 
    2, 8, -2, 1, -16, -4, -5, -1, 2, -10, 
    -2, 1, 7, 1, 7, -2, -4, 0, 0, 0, 
    -2, -1, 4, -3, 3, -4, -4, -4, 3, 4, 
    -3, 0, -2, -3, 5, -2, 2, 0, 2, 2, 
    -2, 11, 2, 1, 1, -1, -2, 5, 0, 0, 
    -19, 2, 0, -1, 3, -2, 1, 1, -1, 1, 
    -4, 0, 0, -1, -5, -5, 1, -3, 1, 0, 
    1, 3, 2, -1, 2, -2, -5, -1, -2, -6, 
    -1, 2, -1, -1, -5, -3, 3, -2, 1, -3, 
    -3, -2, 2, 5, -4, -4, -3, -1, 6, -3, 
    1, 2, 2, 2, -3, 4, 4, -1, -3, -1, 
    -2, 7, 2, -2, 2, 1, 4, 3, -5, 6, 
    1, 2, 2, 1, -3, -1, 3, 3, 3, 1, 
    -1, 4, -4, -1, -9, -3, 3, -7, -2, 1, 
    -1, 3, -1, -1, 3, -4, 1, 1, 3, 3, 
    -5, 2, 3, 1, 4, 7, -2, -4, 5, -1, 
    5, 3, -2, 2, -2, -2, -6, -3, 3, -10, 
    -4, 3, 4, 0, 2, -4, 2, 9, -11, -2, 
    2, 1, 0, -4, -11, -1, 2, 5, -3, 3, 
    -1, 1, 1, -4, -2, 0, -58, 3, -9, -2, 
    1, -2, -4, -21, -4, 5, -1, 2, 2, -14, 
    6, 0, 4, 2, -6, 1, 6, 3, -2, 3, 
    -3, 2, 6, 1, 1, 0, -7, 3, -6, -4, 
    -7, -8, 7, -11, -3, 10, 9, 2, -1, 0, 
    3, -5, 4, 0, 4, 4, -5, 1, 5, 2, 
    5, 2, -3, -6, 3, 2, 2, 1, -3, 3, 
    -1, 0, -6, -6, 1, -9, -5, 9, 3, 3, 
    1, -2, -3, 1, -13, -1, 1, -3, 5, -7, 
    -10, -2, -2, -1, 4, 3, -4, -5, -5, 0, 
    1, -5, -18, -7, 5, 2, -3, 2, 5, -4, 
    -5, 0, -1, -5, 0, -4, -2, 3, -1, -2, 
    -15, 2, -1, 2, 1, -1, -1, 1, 4, -3, 
    -5, -1, -3, -1, 2, 4, -3, 2, 0, -1, 
    -13, -5, -1, 2, 1, -3, 2, 1, 0, 0, 
    3, 1, -3, 5, -6, 2, 4, 3, -3, -10, 
    1, 3, 4, 4, -4, 2, -17, -2, -4, -3, 
    1, -7, -2, -2, 4, 3, 2, -5, -5, -6, 
    1, -3, 0, -3, 6, -31, 4, -14, -1, -8, 
    2, 3, -2, -3, -2, -19, 6, -4, -3, 8, 
    -1, 1, 3, 12, -4, 2, -6, -1, -42, 8, 
    -3, -2, -1, 1, 1, -2, 8, -5, 2, -5, 
    -1, -3, -2, 3, 0, -3, -1, -7, 5, -3, 
    0, 6, -1, 3, -3, 9, 2, -4, -9, -4, 
    -13, 6, 2, 7, -5, 2, -1, 2, -4, 0, 
    -54, 2, 0, 5, -3, -8, 2, 2, 3, 5, 
    0, 1, -96, 2, -3, -3, 1, -3, -2, -12, 
    1, 4, 5, -1, -3, 2, 1, -3, -5, -2, 
    5, -6, 4, 0, -5, -5, 1, 3, -1, -3, 
    -3, -4, 5, -3, -1, 3, 2, 4, -5, 10, 
    5, -1, -4, -3, -5, 5, 1, -22, 9, -1, 
    4, -2, -5, 3, 3, 3, -4, 3, -3, 2, 
    -2, -1, 3, 0, -3, 5, -6, -4, -1, -3, 
    2, -27, -2, 13, 6, -1, -1, -15, -4, 1, 
    1, -1, -2, -3, 3, -4, 1, -3, -7, -6, 
    3, 5, -2, -1, -6, -5, 5, -3, 1, 3, 
    0, 2, -3, 11, 4, 0, -3, -1, -1, 5, 
    0, 0, -21, -1, 1, -1, 1, -1, -2, -1, 
    -2, -4, -6, 0, 2, 2, -1, -6, -2, -3, 
    -1, 2, 4, 2, 2, 1, 4, -6, -3, -1, 
    0, -11, -1, -1, 1, -4, -4, -3, 5, -6, 
    0, -3, -5, -7, 4, 4, -3, -4, -4, -2, 
    4, -2, -1, 0, 3, 3, -5, 12, 3, -1, 
    0, -1, -3, 7, 4, 2, -1, 2, 2, 2, 
    -6, 3, -11, 5, 4, 6, -3, -7, 2, 3, 
    4, 4, -5, 2, -106, -1, -6, -3, 5, -9, 
    -4, -4, 2, 2, 4, -5, 
};
const TfArray<1, int> tensor_dimension2 = { 1, { 4096 } };
const ALIGN(8) int16_t tensor_data3[64] = { 
    4161, 1435, 1477, 1690, 10134, 2279, 7528, 1827, 9639, 2416, 
    3265, 14307, 5774, 2408, 8157, 11297, -979, 614, -243, -410, 
    -2413, -523, -1338, -106, -4105, -744, -2006, -4706, -1038, -2560, 
    -2574, -1725, 3311, 2286, 8294, 18246, 19006, 7112, 7327, 2791, 
    3303, 1343, 3734, 5021, 2339, 3670, 4287, 9436, -783, -424, 
    -565, -3686, -25648, -3069, -2046, 213, -996, 769, -3524, -1570, 
    -1995, -1199, -894, -3140, 
};
const TfArray<1, int> tensor_dimension3 = { 1, { 64 } };
const ALIGN(8) int8_t tensor_data4[2048] = { 
    4, 5, -1, 2, -127, 8, 1, 7, 2, 9, 
    1, 9, -49, 0, 3, -11, -7, 10, -1, 4, 
    2, 5, 0, -2, 0, 4, 4, 1, -1, -1, 
    -3, -15, 0, -23, 4, 0, -32, 37, -4, -17, 
    -4, -8, 0, 6, -3, -3, 2, 8, -11, -2, 
    0, -19, 4, -5, -3, 1, 0, 4, -6, 4, 
    -21, 9, 6, 3, -77, 0, 6, 2, -50, -26, 
    3, -48, -15, -46, 7, -17, 16, -11, 18, -30, 
    -63, 10, 3, 2, 1, -127, -51, 10, -3, -15, 
    -12, -14, -8, -17, -28, -31, -13, -6, -8, 1, 
    -3, 12, 12, 0, -4, -3, -7, 50, -6, 0, 
    15, -47, -127, 2, -3, -4, 12, 22, 12, -6, 
    7, 5, 16, -4, 5, 14, -23, -26, 3, 2, 
    0, 2, 1, -8, -127, 1, -3, 5, -1, 0, 
    1, 1, 9, 3, 1, 1, 1, 0, -1, 0, 
    1, 1, -3, 0, -100, -3, -10, -7, 0, 0, 
    21, 31, -3, 4, -49, 4, -4, -7, 7, 28, 
    -104, -34, -3, -10, 24, 14, -19, -127, 9, -28, 
    -70, -1, -41, 0, -14, 6, -10, -4, 13, -46, 
    -13, 41, 7, -28, -13, 18, -17, -3, -1, -50, 
    -15, -127, -12, 18, -9, -13, 11, -10, 26, -19, 
    -13, 89, 6, 3, -27, -10, -11, 13, -3, -6, 
    62, -11, 7, -37, 12, -20, 5, -4, 2, -48, 
    -3, -6, -1, -6, -6, -5, 3, -5, -10, 0, 
    1, 1, 2, -18, 2, -9, -7, 3, -10, -4, 
    4, 2, -1, -5, -1, -4, -14, -74, 3, -7, 
    -12, -20, 26, -2, 14, 36, 127, 36, -29, -15, 
    48, 32, 27, -28, 2, -2, -5, -1, 26, -15, 
    -11, 9, -21, -2, 0, -18, 11, 25, 7, -11, 
    -4, 6, 7, 2, -7, 36, -5, -5, -7, -1, 
    8, 3, 1, 4, -1, -5, 2, 4, -1, -2, 
    4, -2, -2, 3, -2, 3, -7, 6, 23, -14, 
    43, 32, 1, -7, 17, 35, 6, -8, -14, 117, 
    -11, -7, 81, 1, -7, -33, 6, 36, -23, -127, 
    3, 10, 8, -10, -23, -6, -2, -7, -22, 2, 
    3, -22, 6, -2, -1, -4, 0, 3, 7, 7, 
    -3, 2, -5, -4, -9, -1, -27, 1, 4, 0, 
    -3, 4, -2, 2, 2, 1, 0, -3, -11, 0, 
    3, -127, -2, 2, -127, -106, -17, 8, -59, 64, 
    12, 83, 2, -72, -20, 71, -11, -17, 56, 7, 
    57, 69, 16, -15, -10, 2, -66, 1, 27, 6, 
    -3, 9, 17, -35, 11, 94, -78, 30, -22, -26, 
    38, 42, 20, 9, -25, 35, 19, -22, -21, -16, 
    21, -2, 15, -98, 1, 31, 127, 7, -15, -11, 
    8, 6, 4, -10, -23, -72, 5, 17, -48, 52, 
    -12, -19, 8, 64, 32, 9, 14, 48, 14, -43, 
    -16, 6, 61, 6, 5, -119, -11, 47, -40, 15, 
    -5, 20, -1, -2, 24, 28, -42, -64, 8, 10, 
    10, 7, -11, 4, 3, 0, 8, 1, 1, 23, 
    12, 28, 1, 7, 6, 13, 1, -15, -2, -8, 
    -9, 16, 18, -11, 4, -7, -6, 7, 16, -27, 
    4, 36, 8, -3, -3, -1, -3, -14, 3, 1, 
    -14, 0, 2, 2, 20, -1, 2, 4, 0, -2, 
    16, -11, 8, -3, -1, 2, 2, 1, 1, -7, 
    -1, 1, -2, 0, -127, -1, -9, 2, -21, -4, 
    2, 2, 6, -2, 6, 6, -1, 17, -20, -18, 
    0, -15, 7, -18, -10, -36, 10, 2, 2, 1, 
    -5, 10, -6, -4, 6, 3, -9, -14, 5, -5, 
    24, 0, -53, 12, 5, -43, 4, -1, -106, 8, 
    -20, 2, 3, -20, -61, -7, 19, -67, 17, -16, 
    -34, -17, 11, 14, -14, -1, -19, -1, 14, -3, 
    11, -2, 58, -25, -47, -16, -10, -88, 5, 2, 
    -36, 7, -9, -6, 4, -15, 18, 35, 21, 6, 
    11, 0, 21, -3, -11, 16, 0, -1, 5, 7, 
    -4, 0, -3, 2, -2, 2, 2, -68, -2, 1, 
    1, -2, 3, 13, 2, -4, -2, 4, 4, -17, 
    5, 3, -2, -2, -3, 1, -4, -4, -2, -2, 
    -8, 2, 33, -17, -23, 15, 3, 51, -62, -2, 
    -28, -12, 11, 12, 34, -92, -8, 38, -3, 27, 
    11, -59, -45, 21, -12, -10, 36, -9, -22, -36, 
    5, -6, -21, 14, -8, 18, -11, -13, -6, -1, 
    42, 5, -7, -17, 39, -13, 13, -5, -1, -10, 
    2, -2, -5, -39, -15, 8, -23, 0, 5, 6, 
    97, -36, 11, -8, -52, 11, -127, -5, 2, 5, 
    -2, 15, -11, 5, -67, 3, -6, -1, -8, -9, 
    -3, -2, 3, -5, 6, -7, -8, 10, -7, 2, 
    -28, -5, -10, -5, 0, -2, -7, -2, 59, -3, 
    -52, -28, 52, -56, -26, -6, -7, 23, -20, 25, 
    45, -36, 4, -16, -5, -12, -5, 103, 15, 5, 
    -18, -21, -4, 18, -48, -25, 13, 1, 10, -21, 
    -15, -6, -5, -9, -127, -12, -17, 4, 4, -15, 
    -5, 2, -13, 1, 2, 4, -1, 1, 19, 0, 
    0, -5, -2, 1, 10, -2, 0, 11, -4, 1, 
    -7, 2, -116, 7, 16, -9, -31, -25, -12, -35, 
    7, 2, -10, 14, -11, 37, -10, 8, 9, -69, 
    -65, 70, 36, -25, 16, -20, 24, -7, 8, 33, 
    -24, -16, 26, -6, 5, 1, -4, -3, 5, -5, 
    -1, -7, 19, 4, 0, -2, -6, -1, -6, -1, 
    -24, 9, -3, 5, -3, 18, -22, -3, -9, 0, 
    2, -7, 3, -4, -16, -1, -10, 12, 35, 27, 
    -90, -47, 11, 1, -28, -1, -17, -9, -1, 74, 
    9, 12, -9, 90, -33, 28, -31, 11, -28, -11, 
    20, 19, -32, -68, 19, -14, -85, 23, -13, -10, 
    17, -23, 42, -74, 42, -5, 36, 6, 10, -4, 
    56, 16, -19, 6, 4, 23, 45, -25, -17, -32, 
    -20, 12, -24, 1, 29, -49, -12, 8, -18, 23, 
    74, 19, 20, -9, 127, -5, 22, 3, 90, 10, 
    16, -22, 3, 25, 35, 16, 7, 10, -7, 20, 
    36, -37, 20, -16, 19, 30, 23, 27, -17, 13, 
    10, 19, 1, 0, -3, -15, -127, -24, -19, -6, 
    17, 3, 9, 0, 26, 4, -5, -18, -12, -120, 
    10, -4, -24, 23, 5, -5, 12, -11, 1, -15, 
    -5, 8, -3, -7, 12, -10, -3, -5, -2, 10, 
    -11, -11, -4, 0, -42, 14, -24, 0, 12, -6, 
    -127, -3, -1, -10, -4, 3, -23, -5, -19, 4, 
    0, 5, -1, -6, 6, -15, 3, -2, -2, -10, 
    27, -7, 15, -5, 3, 33, -5, 0, -2, 5, 
    13, -2, 1, -3, 10, 56, -9, -9, 1, 10, 
    52, -6, -6, 4, -19, -15, 8, -30, -15, 27, 
    9, -7, 5, -1, 7, 23, 3, -28, -3, 14, 
    -5, -2, 10, -26, 16, -127, 3, 6, -8, 8, 
    0, -12, -19, -2, -6, -8, -26, -38, 4, 13, 
    81, -21, -8, 21, -6, 58, -8, -16, 0, -42, 
    -12, -49, -65, 15, 42, 15, 2, -83, 13, 9, 
    -21, 15, 19, -17, 54, -2, 8, -11, -124, -5, 
    -33, 1, -3, -15, 6, 8, -8, -28, -1, 1, 
    1, -13, 2, 14, 1, 2, -127, -1, 0, 14, 
    1, -15, 3, -2, 2, -8, 2, 5, -6, 1, 
    11, 18, 7, 1, -35, -52, -4, -4, -69, -37, 
    -12, -29, 13, -58, 6, -25, -30, 0, -1, 28, 
    59, -26, 1, -1, -20, 78, -17, 10, 5, -1, 
    -24, 3, -127, 9, 28, -34, -31, 50, -5, 13, 
    -34, 44, 9, 37, 22, 26, 14, 33, 8, 23, 
    6, -44, -42, -44, 27, 4, 39, 9, 127, -30, 
    10, 27, 9, 35, -45, -1, 37, -1, 13, 18, 
    -7, 6, 62, 32, 12, -1, -4, -109, 15, -11, 
    -127, -12, 45, 13, 34, -2, 6, -16, 1, 6, 
    1, 5, -12, -12, -2, 2, -86, -20, 9, -10, 
    -15, 2, -1, 15, -4, -16, -46, -7, -3, 2, 
    8, -35, -5, 5, -9, 3, -56, -52, -9, -3, 
    -17, -31, 60, 1, -2, -13, 34, -8, -54, 34, 
    -23, 9, 12, -7, 1, 0, -5, 1, 0, -2, 
    7, 6, -2, -4, 6, 2, -4, -3, -16, -2, 
    3, -1, -1, 4, -37, 6, -2, -5, 20, -4, 
    -1, 8, -18, -4, -10, -24, 2, 5, -7, 2, 
    -17, -15, 5, 14, -14, -2, -2, 0, 15, -15, 
    5, 4, -1, 4, -1, 15, -73, -2, -9, 0, 
    0, -3, -2, 2, -15, -19, 12, -84, 2, 0, 
    -3, -65, -6, -5, 0, -10, -14, -80, -8, 1, 
    -84, -9, -17, -54, 2, -64, 8, -14, -28, 2, 
    -32, -1, 3, -1, -28, -13, -6, -8, -2, -5, 
    -1, -2, 2, 2, -3, -1, 0, 8, 2, 2, 
    1, 0, 1, 0, 3, 1, -2, 0, 0, 1, 
    -3, 1, 1, 1, -127, 1, -1, 1, 3, 1, 
    20, 13, 0, -5, 7, -19, -7, 6, 4, 3, 
    0, -16, -5, 3, -3, 2, 7, 2, -2, -5, 
    2, 2, -3, 4, -3, -5, -3, -4, -7, 2, 
    1, 14, 14, 127, -12, -5, 52, -9, 7, -14, 
    -15, -56, 17, -30, -25, -3, 17, 2, 13, -42, 
    -9, -17, -16, 10, 4, 15, -25, 4, -13, 14, 
    21, 0, -7, -35, 5, 16, 11, 13, -34, -57, 
    -1, -24, 4, -67, 2, -1, 54, 8, 18, 7, 
    -86, -2, 5, 11, -1, -4, -7, 14, 9, -10, 
    -1, -2, -28, -4, 14, 11, 6, 3, -22, 5, 
    36, -37, 8, -1, 5, -6, -21, -3, 38, -10, 
    5, -13, -4, -9, -2, 2, 2, 10, -6, 3, 
    12, 0, -15, -18, 2, 0, -10, -4, -34, 8, 
    0, -14, -127, -13, -1, -2, 8, -10, -20, 4, 
    5, -1, -2, 2, -6, -10, -9, 7, -25, -8, 
    11, 10, 11, -10, -4, -17, -7, 2, -7, 5, 
    -97, -11, 16, -12, 9, 33, 22, -3, 25, 2, 
    -98, 10, 40, -16, 20, -8, -9, -29, 28, 44, 
    1, 12, 15, -11, -63, -9, 9, -2, -7, 3, 
    13, -2, 8, -13, -42, -5, 45, -127, -55, 10, 
    -2, -3, -10, -15, -17, -4, -11, 2, -13, 23, 
    -13, -86, -43, -9, -25, -15, -16, 20, -36, -42, 
    11, -25, -76, 9, -90, 1, 0, 16, 27, 7, 
    2, -4, -36, -2, 5, 0, -36, -1, -78, 6, 
    0, 3, -2, 3, -9, 3, 4, 7, -4, 8, 
    -8, 13, 5, 8, 8, 1, -10, -1, -30, 5, 
    4, -79, 6, 0, -71, -13, -9, 11, -82, -4, 
    -27, -4, 6, -8, -48, -62, 11, -26, -8, -2, 
    -32, -12, -22, -17, 12, -7, -2, -5, 33, -1, 
    7, -39, 41, -66, -3, -16, 18, -19, -15, 14, 
    19, 14, 25, 112, 2, -12, 13, -1, -36, 86, 
    106, -16, 64, -8, 15, 35, -11, 42, 117, -15, 
    -45, 4, -2, -7, 111, -9, 15, -12, 0, 7, 
    -64, -4, 6, -8, -68, -21, -12, 15, -87, 19, 
    20, -7, 18, 14, 1, 13, 15, 11, 9, -1, 
    -10, 10, -24, -6, -4, -36, 127, 59, -17, -1, 
    -38, -10, -9, 15, -42, 3, 23, 58, 25, 12, 
    -6, -12, 26, -27, 95, -16, 7, 5, -19, 113, 
    -8, -4, 109, 3, 3, -4, 9, 6, -121, -127, 
    13, 1, 11, -13, 4, -2, 25, -10, 16, -16, 
    3, 0, 1, 6, -4, 22, -15, -4, -2, -5, 
    0, 16, -3, 1, -8, -3, -5, 1, -15, 1, 
    16, 15, -3, 3, 17, -15, -5, 0, -54, -22, 
    19, -127, 2, -8, 9, -30, -4, 4, -11, 1, 
    -6, 7, -26, -16, 3, 0, -4, 3, -127, 2, 
    -11, -1, -62, -94, -5, -2, -71, -1, -60, 1, 
    2, -15, -89, -17, -2, -7, 4, -8, -58, 15, 
    -44, 2, -29, -1, -31, -31, -2, 2, -24, -1, 
    -4, 0, 15, -4, -2, -6, -7, -25, 3, -2, 
    -1, 1, 0, -2, 0, -1, -6, -1, -6, -24, 
    -9, -1, 1, 0, 0, 2, 1, 3, 3, -2, 
    -1, -2, 0, -4, 4, 0, -127, 20, 15, 2, 
    -2, 13, -5, 6, 2, -2, -1, -3, 1, 5, 
    8, 3, -14, 2, 20, 0, -2, -2, 5, 19, 
    0, 0, 4, -2, 18, -5, -37, -54, 36, -40, 
    -41, -15, 7, 18, 81, 14, 0, 16, -7, -9, 
    -15, 18, 7, 55, -45, -1, -25, 12, 9, -18, 
    9, -10, -18, -3, -5, 3, 3, -7, -4, -27, 
    21, 15, 9, -2, 50, 11, -9, -2, -22, 10, 
    -12, 13, 3, 7, 92, -127, -39, -17, 4, -9, 
    -12, 3, 7, 12, -8, 3, -6, 15, 
};
const TfArray<1, int> tensor_dimension4 = { 1, { 2048 } };
const ALIGN(8) int16_t tensor_data5[128] = { 
    9995, 10980, 1112, 1018, 8471, 6201, 13185, 7779, 960, 12163, 
    8559, 5352, 7723, 1478, 7106, 7075, -584, -1232, -1697, -1880, 
    -1086, -1575, -1151, -1128, -1979, -1321, -1103, -1732, -883, -1954, 
    -2009, -1023, 11348, 5426, 1411, 10800, 4680, 6043, 11071, 973, 
    7618, 1143, 23811, 905, 7064, 10330, 5678, 12963, -1196, -993, 
    -2058, -1599, 136, -1376, -1246, -1761, -1501, -2157, -1949, -1976, 
    -1364, -777, -935, -1036, 9093, 1436, 12302, 2487, 10722, 15381, 
    9388, 9812, 8092, 12649, 11091, 1237, 12354, 8280, 14331, 9768, 
    -2130, -2190, -1127, -1083, -3649, -1699, -1135, -1172, -1691, -977, 
    -1578, -2035, -1167, -1272, -3792, -1238, 11690, 11114, 9194, 9223, 
    15636, 4424, 10925, 1003, 7456, 982, 9832, 10600, 1254, 1301, 
    11318, 998, -2263, -1106, -1068, -1142, -2195, -520, -1352, -1882, 
    -1711, -2059, -1303, -1185, -1811, -2099, -1223, -1747, 
};
const TfArray<1, int> tensor_dimension5 = { 1, { 128 } };
const ALIGN(8) int8_t tensor_data6[1664] = { 
    -11, 19, -19, 12, -6, -2, -22, -6, 66, 14, 
    23, 23, -22, -127, -98, -6, 46, 53, 82, 96, 
    -65, -90, -26, 59, -34, 75, -127, 78, -62, 27, 
    64, 80, 26, 49, 41, 19, 13, -3, -16, 33, 
    -33, -2, -93, -11, 58, -1, -25, 11, 55, 74, 
    30, 94, -37, -3, 31, -6, -44, 22, 35, 32, 
    -19, 53, -67, 83, -41, -5, 127, 70, 91, 17, 
    66, -13, 6, -4, 2, 22, 0, 11, 6, -20, 
    -13, 9, -12, -9, 11, -44, -42, 35, -127, -109, 
    68, 70, 7, 85, -14, 34, 73, -83, -100, -127, 
    -48, 62, 69, 36, 40, -10, 57, -71, -47, 104, 
    91, 13, 68, 11, 74, 86, -12, -76, -7, -68, 
    -17, 30, 14, 4, 14, 58, 10, 21, -38, -127, 
    -122, -8, 67, 41, 24, 42, 6, -22, 0, -37, 
    32, -37, 29, 13, -6, 11, 0, -6, 11, 16, 
    -1, -2, 9, 15, 22, 5, 28, -3, -127, 4, 
    38, -33, 25, -17, 0, 28, -21, 9, -50, 126, 
    95, 104, 105, 89, -33, -51, 127, -63, 87, -16, 
    98, -33, -15, 6, 92, 82, 91, 6, 127, -76, 
    124, 3, -2, 0, 13, 8, -26, -22, 6, 61, 
    40, -43, -62, 17, 127, -113, -27, 31, -3, 73, 
    -68, -60, 9, -57, -24, 119, 46, -105, 127, -82, 
    -3, 20, 9, 8, -3, -11, 3, -1, 3, -15, 
    -9, 6, 16, -6, -3, -16, 11, -6, 6, 3, 
    41, -63, 52, -78, 49, 63, 47, 27, -20, 12, 
    9, -6, 45, 30, 16, -65, 63, -4, -118, 37, 
    -53, -127, 51, 43, -11, 14, -22, 6, 2, 11, 
    -11, -14, 13, 15, 0, -4, 41, -30, 18, 73, 
    -62, -79, 53, 76, -28, -127, -22, 77, 37, 112, 
    110, 24, 112, 82, 7, 124, -29, 97, 127, -55, 
    -11, -30, -88, 125, -73, -103, 25, 107, 88, 3, 
    -17, 93, 41, 85, -6, 74, 90, -70, 18, -17, 
    124, -84, -4, 68, 80, -39, -70, 127, 60, 81, 
    -100, 63, 45, 52, -79, 84, -4, 14, -7, -17, 
    21, 47, -9, -12, -49, 6, 61, 35, -53, 66, 
    -15, -127, 11, 33, -3, -4, 32, -31, 16, -7, 
    -1, -8, -8, -13, -15, -8, -6, -16, 3, 4, 
    16, 16, -7, 78, -6, -127, 5, 24, 32, -24, 
    -30, -15, 20, 8, -6, 8, 1, 0, -1, 5, 
    -2, -7, -7, -2, 40, 55, -45, -127, 36, 59, 
    -24, 17, 1, -23, 14, -11, 19, -4, 5, -14, 
    -10, -14, 7, -2, -2, -26, 6, -27, -14, 10, 
    32, -54, -28, -7, -12, 81, 17, 119, 82, 51, 
    -127, -120, 8, -17, 7, -42, -21, -19, -27, -49, 
    -127, 103, 56, 20, -3, 17, 13, 65, -44, 34, 
    4, -50, 15, 11, 22, -6, 6, 4, -66, 27, 
    19, -13, 27, -40, -41, -11, 8, -8, -42, -87, 
    -86, -21, 52, 37, 79, 71, 9, 47, -52, 127, 
    -2, 24, 104, 105, -34, -61, 71, -91, 44, 119, 
    127, 52, 59, 75, 127, 108, 35, 117, -31, 2, 
    58, -1, 112, -33, 127, -62, -12, 14, -17, 10, 
    -5, -5, -8, 5, -2, 7, -10, 3, -10, 9, 
    4, -14, 13, -2, -7, 20, -11, -1, 99, 112, 
    64, 87, -48, -25, 67, 127, 113, -27, -17, 123, 
    -26, -43, 120, 69, 124, 49, -45, 60, 46, 19, 
    63, -89, 3, 7, 39, 70, 120, 43, -112, -127, 
    -79, -34, 38, 33, 19, -30, 60, 12, -11, 19, 
    -24, 31, -19, -59, 64, -16, 11, -4, 112, 87, 
    -87, 64, 68, 7, 127, 67, 11, -53, 116, -60, 
    -83, 120, -107, 2, 63, 15, 51, 74, 110, 71, 
    1, -3, -9, 7, -18, -62, 89, 44, -36, -95, 
    127, -5, -83, 81, -52, 19, 4, -26, 33, 11, 
    -12, -4, -17, 19, -18, 34, 44, 45, 14, -29, 
    45, 19, -41, -21, 9, 13, -7, 20, -16, -3, 
    -4, 71, -3, -13, -32, -4, -127, 5, -6, -14, 
    -127, -60, -8, -27, -91, -62, -49, -20, 10, 26, 
    -18, -39, -6, 68, 29, -1, 18, 41, 60, 24, 
    -21, 14, -9, 27, -5, -8, 15, 36, 7, 24, 
    27, 51, 56, -24, -127, -67, 26, -5, -6, 31, 
    -11, 8, 6, -32, 50, -28, -30, 20, 116, 85, 
    -43, -63, 40, 113, 98, 10, 40, 29, 2, -31, 
    84, -36, -22, 127, 44, -22, 101, -31, 16, 111, 
    -1, 12, -33, -2, -5, -46, -59, -14, -8, -81, 
    -127, -103, 90, -76, 30, 72, 99, 34, 99, -2, 
    7, 46, 62, 7, -4, 0, 1, 8, -3, 4, 
    -2, 2, 6, -3, -7, 12, 15, -1, -10, 35, 
    3, -64, -53, -80, -2, 127, 11, 10, 7, -4, 
    25, -27, -84, 91, 55, -82, -37, 127, -15, -104, 
    116, -86, 45, 2, -4, -2, -12, -7, -19, 11, 
    11, 7, -31, 24, 100, 127, -26, 25, 68, -52, 
    27, -29, 31, -18, 0, -2, -19, 12, -26, -40, 
    -3, 15, -4, -13, 1, 21, -49, 112, -127, 72, 
    -14, 79, 25, -1, -52, -64, -41, 53, 52, 19, 
    -24, 33, 24, -50, -36, 69, -48, -67, 36, 20, 
    -4, 16, 0, -15, -20, 7, 10, 0, 13, 3, 
    0, 15, -1, -13, 5, 22, -1, 16, 33, -127, 
    27, -6, 4, 11, 38, 106, 68, -41, 114, 44, 
    116, -55, 116, 45, -61, 25, -57, -65, -72, 48, 
    121, 28, 126, 81, -30, 61, -42, 127, 1, 15, 
    62, 72, 62, -43, -127, -36, 27, -19, 0, -15, 
    -3, -25, 65, -14, -8, 7, 13, -21, -3, 8, 
    23, -4, -1, -2, -4, 1, -10, 2, -4, 3, 
    7, 11, 14, -4, -14, -6, -95, 27, 127, -31, 
    -42, 5, 2, -9, 20, -6, 10, -20, 42, -112, 
    4, -11, 64, 32, 27, 3, 14, 29, 57, -8, 
    -15, 64, -12, -55, 78, 7, -127, -37, 30, 10, 
    127, 18, -67, -66, 34, -21, 23, -2, -14, -2, 
    14, -1, -11, 15, 16, -30, 16, 4, 13, 8, 
    -34, 18, -31, 0, 12, -20, -15, 19, -13, 1, 
    -11, -13, 19, -39, -28, -7, 31, 92, -31, 58, 
    97, -127, 56, -74, -21, 18, 4, -10, 8, -10, 
    -9, 3, -23, -8, 29, -4, 15, -13, 9, -9, 
    3, 9, 19, -12, 10, -37, -18, 127, -45, -18, 
    12, 19, -5, -18, 23, 2, -24, -9, -16, 23, 
    -35, -19, 41, 37, -25, -31, 72, -13, -25, -10, 
    25, 3, 71, 14, 68, 127, -25, 51, -36, -16, 
    -62, 12, -38, -71, -101, 53, 56, -91, 21, 4, 
    51, 60, 127, 72, 28, -24, -58, 38, -23, -4, 
    -19, 29, 80, -127, 42, -50, 69, -18, 4, -6, 
    -38, -1, 27, 28, -47, 23, 57, -70, 12, 13, 
    9, -7, -19, 12, -11, 76, -29, 29, -67, 127, 
    121, 76, -7, 112, 26, -3, 66, -73, 21, -5, 
    -82, 18, 13, 50, 121, 76, 52, 120, 9, 4, 
    -17, 10, 127, 48, -6, 38, 64, 37, -38, -42, 
    -54, -30, 2, -49, 2, -7, 18, -33, -7, -14, 
    45, -15, 125, 0, 29, -7, 127, 49, 102, -90, 
    127, -36, -37, -15, -26, 25, 19, 18, -52, 111, 
    -23, 109, 111, 5, 61, 15, 6, -8, 0, -8, 
    -15, 37, -38, -68, 127, -41, -48, 108, -92, 81, 
    -53, 37, -19, 14, -9, 5, -2, -3, 12, -6, 
    97, 113, 127, 73, 56, -17, 102, -31, 57, 34, 
    30, -37, -31, 84, 78, 37, -16, -44, 51, 35, 
    -70, 30, 111, -18, 127, 57, -45, -25, 54, 18, 
    -12, 100, -8, 54, -2, 59, 21, 64, 2, -22, 
    -56, -19, 46, 70, 84, -1, 53, 30, 6, 3, 
    -23, -27, 44, 1, -50, 17, 55, -83, 125, -127, 
    97, -53, 41, 9, -33, 12, -23, 14, -14, 17, 
    19, -10, 4, -5, 15, -11, 28, 46, 34, -21, 
    -72, -93, 19, 96, 14, -20, 53, -4, -127, 25, 
    29, 8, 11, -13, 11, -10, -29, 74, 62, -109, 
    60, 106, -102, 74, 101, -45, 24, 127, 118, -6, 
    110, -60, 76, 78, 58, 64, 108, 39, 112, 48, 
    23, -34, -28, 56, 127, -7, -90, -39, 35, 74, 
    39, -19, 14, 4, 3, 19, 5, -33, 32, -91, 
    28, 32, -48, -41, 115, 76, -29, 55, 24, -121, 
    -25, -10, 114, 37, -62, 13, 77, 85, 28, -27, 
    72, -5, 26, 113, 97, 116, 127, -13, 6, 1, 
    -7, -5, 16, -17, -36, 87, -67, 83, -95, 78, 
    -9, -60, 127, -77, 25, -26, 8, -5, 9, -8, 
    17, -10, -13, 17, -35, -23, 2, 1, 29, -20, 
    1, 9, -2, 17, -12, -127, 17, 76, -34, -96, 
    -17, -14, 56, -73, -5, 30, 36, -35, -65, 127, 
    29, -84, 79, 28, -44, 25, -5, -13, 22, -17, 
    -9, 8, 6, 2, -9, 7, -2, 13, -24, -1, 
    40, -83, 13, 83, -127, 56, -21, 1, -10, 26, 
    1, -6, 26, 29, -53, -17, 70, -59, -2, 24, 
    30, 4, -59, 18, -2, 2, 6, 5, -5, 2, 
    3, 7, 7, -15, -8, 0, 34, -35, 48, -16, 
    -51, 34, -9, -45, 20, 66, 56, -127, -5, 6, 
    14, 3, 5, 13, -5, 27, 30, 8, -40, -127, 
    -40, 68, 22, 23, 7, -25, 31, -11, -2, -23, 
    16, -4, -104, 17, 127, 7, -6, -5, 3, -7, 
    -17, 28, 16, 6, -10, 24, 6, 1, -14, 20, 
    -12, 9, -20, 14, 4, 18, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 
};
const TfArray<1, int> tensor_dimension6 = { 1, { 1664 } };
const ALIGN(8) int64_t tensor_data7[2] = { 
    -1, 1, 
};
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,1,4,64 } };
const TfArray<1, float> quant8_scale = { 1, { 0.24111956357955933, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,1,4,32 } };
const TfArray<1, float> quant9_scale = { 1, { 0.33315452933311462, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(4) int32_t tensor_data10[1] = { 
    865, 
};
const TfArray<1, int> tensor_dimension10 = { 1, { 1 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00022624728444498032, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant11_scale = { 1, { 0.79527455568313599, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int8_t tensor_data12[1*1*1*32] = { 
  /* [0][0][][] */ -69,-31,73,-73,-72,-67,64,78,-47,-88,52,-82,-42,-106,21,-99,57,-46,-68,-43,95,-64,76,-92,-87,55,-127,-28,93,76,88,36, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant12_scale = { 1, { 0.00028448953526094556, } };
const TfArray<1, int> quant12_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,1,1 } };
const TfArray<1, float> quant13_scale = { 1, { 0.17188803851604462, } };
const TfArray<1, int> quant13_zero = { 1, { 31 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,1 } };
const TfArray<1, float> quant14_scale = { 1, { 0.17188803851604462, } };
const TfArray<1, int> quant14_zero = { 1, { 31 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,1 } };
const TfArray<1, float> quant15_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
uint8_t ALIGN(4) opdata0[143] = { 107, 116, 0, 109, 112, 0, 32, 96, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 248, 255, 255, 255, 72, 0, 0, 0, 0, 97, 103, 103, 112, 0, 8, 64, 0, 0, 0, 24, 0, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 3, 0, 251, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 79, 43, 121, 119, 68, 55, 6, 1, 6, 82, 13, 1, 124, 72, 64, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
uint8_t ALIGN(4) opdata1[135] = { 107, 116, 0, 109, 112, 0, 8, 0, 1, 0, 0, 64, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 111, 116, 112, 0, 8, 32, 0, 0, 0, 3, 0, 249, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 34, 20, 6, 95, 43, 113, 111, 68, 55, 6, 1, 6, 98, 13, 0, 116, 72, 0, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs1 = { 3, { 8,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
uint8_t ALIGN(4) opdata2[135] = { 107, 116, 0, 109, 112, 0, 8, 128, 0, 0, 0, 128, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 32, 0, 0, 0, 1, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 34, 20, 6, 95, 43, 113, 111, 68, 55, 6, 1, 6, 98, 13, 0, 116, 72, 0, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs2 = { 3, { 9,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,12,10 } };
const TfArray<1, int> outputs3 = { 1, { 13 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 13,7 } };
const TfArray<1, int> outputs4 = { 1, { 14 } };
const TfArray<1, int> inputs5 = { 1, { 14 } };
const TfArray<1, int> outputs5 = { 1, { 15 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension0, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0)) },},
  { kTfLiteInt16, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 128, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 2048, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1664, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 16, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8)) },},
  { kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension9, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9)) },},
  { kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension11, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11)) },},
  { kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension13, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13)) },},
  { kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension14, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension15, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15)) },},
};
const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_XC_conv2d_v2, 143, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_XC_conv2d_v2, 135, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_XC_conv2d_v2, 135, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, 0, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_LOGISTIC, 0, },
};

// Scratch buffer variables
int scratch_buffer_idx = 0;
const int scratch_buffer_offsets[3] = { 352, 0, 0 };
tflite::MicroContext mc;

// Xcore context and thread variables
xc_context_config_t xc_config;
constexpr int kStackWordsPerThread = 256;
uint64_t xc_stack[kStackWordsPerThread/2];

// Functions to be used as function pointers for TfLiteContext and MicroContext 
static void* AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes) {
  static uint8_t *AllocPtr = tensor_arena + sizeof(tensor_arena);

  AllocPtr -= bytes;
  return AllocPtr;
}

static TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *context,
                                       int tensor_idx) {
  return &evalTensors[tensor_idx];
}

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext *context, size_t bytes,
                                       int *buffer_idx) {
  *buffer_idx = scratch_buffer_idx++;
  return kTfLiteOk;
};

static void *GetScratchBuffer(struct TfLiteContext *context,
                                       int buffer_idx) {
  return tensor_arena + scratch_buffer_offsets[buffer_idx];
}

static TfLiteTensor* AllocateTempInputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->inputs->data[index]];
}

static TfLiteTensor* AllocateTempOutputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->outputs->data[index]];
}

static void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
}

static void* external_context() {
  return &xc_config;
}

} // namespace

TfLiteStatus model_init(void *flash_data) {
  // Set flash data in xcore context config
  xc_config.flash_data = flash_data;

  // Setup microcontext functions
  mc.AllocateTempInputTensor = &AllocateTempInputTensor;
  mc.AllocateTempOutputTensor = &AllocateTempOutputTensor;
  mc.DeallocateTempTfLiteTensor = &DeallocateTempTfLiteTensor;
  mc.external_context = &external_context;

  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  
  // Set microcontext as the context ptr
  ctx.impl_ = (void*)&mc;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 16;
  for(size_t i = 0; i < 16; ++i) {
    tflTensors[i].data.data = tensorData[i].data;
    evalTensors[i].data.data = tensorData[i].data;
    tflTensors[i].type = tensorData[i].type;
    evalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    evalTensors[i].dims = tensorData[i].dims;
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_XC_conv2d_v2] = *(tflite::ops::micro::xcore::Register_XC_conv2d_v2());
  registrations[OP_CONV_2D] = tflite::Register_CONV_2D();
  registrations[OP_RESHAPE] = tflite::ops::micro::Register_RESHAPE();
  registrations[OP_LOGISTIC] = tflite::Register_LOGISTIC();

  for(size_t i = 0; i < 6; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, nodeData[i].custom_initial_data_size);
    }
  }
  for(size_t i = 0; i < 6; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  15, 
};
TfLiteTensor* model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus model_invoke() {
  thread_init_1(&xc_config.thread_info);
  xc_config.thread_info.nstackwords = kStackWordsPerThread;
  xc_config.thread_info.stacks = &xc_stack[kStackWordsPerThread/2 - 1];
  for(size_t i = 0; i < 6; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      thread_destroy(&xc_config.thread_info);
      return status;
    }
  }
  thread_destroy(&xc_config.thread_info);
  return kTfLiteOk;
}
